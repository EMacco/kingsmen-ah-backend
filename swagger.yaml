swagger: "2.0"
info:
  description: "Authors Haven - A social platform for the creative at heart."
  version: "1.0.0"
  title: "Authors Haven"
  license:
    name: "MIT"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/v1"
tags:
- name: "users"
  description: "User operations"
- name: "auth"
  description: "Authentication operations"
- name: "profiles"
  description: "User profile operations"
- name: "articles"
  description: "Articles operations"
schemes:
  - "https"
  - "http"
paths:
  /users:
    post:
      tags:
      - "users"
      summary: "Create user"
      description: "Creates a new user in the application"
      operationId: "createUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "formData"
        name: "username"
        description: "The unique username"
        required: true
        type: "string"
        format: "text"
        minLength: 4
        maxLength: 100
      - in: "formData"
        name: "email"
        description: "The unique user email"
        required: true
        type: "string"
        format: "email"
        minLength: 5
        maxLength: 255
      - in: "formData"
        name: "password"
        description: "The user password"
        required: true
        type: "string"
        format: "password"
        minLength: 5
        maxLength: 255
      responses:
        201:
          description: "User created successfully"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid email/password supplied"
    get:
      tags:
      - "users"
      summary: "Users with profiles"
      description: "Returns all users and their corresponding profiles"
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "fail"
      security:
      - api_key: []
    put:
      tags:
      - "profiles"
      summary: "Update User Profile"
      description: "Returns the Updated User Details"
      operationId: "updateProfile"
      produces:
      - "application/json"
      parameters:
      - in: "formData"
        name: firstname
        required: false
        type: string
        description: "first name"
      - in: "formData"
        name: lastname
        required: false
        type: string
        description: "last name"
      - in: "formData"
        name: bio
        required: false
        type: text
        description: "bio"
      - in: "formData"
        name: avatar
        required: false
        type: string
        description: "Avatar URL"
      - in: "formData"
        name: location
        required: false
        type: string
        description: "Location"
      - in: "formData"
        name: phone
        required: false
        type: integer
        description: 'Phone Number'
        minLength: 11
        maxLength: 14
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid token supplied: format Bearer <token>"
        401:
          description: "Invalid Token Provided"
      security:
      - api_key: []
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "User login"
      description: "Logs user into the system"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "formData"
        description: "The email for login"
        required: true
        type: "string"
        format: "email"
        minLength: 5
        maxLength: 255
      - name: "password"
        in: "formData"
        description: "The password for login in clear text"
        required: true
        type: "string"
        format: "password"
        minLength: 5
        maxLength: 255
      responses:
        200:
          description: "login successful"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid email/password supplied"
  /profiles/{username}:
    get:
      tags:
      - "profiles"
      summary: "User Profile details"
      description: "Returns the profile details of a user"
      operationId: "getProfile"
      produces:
      - "application/json"
      parameters:
        - in: path
          name: username
          required: false
          type: string
          description: "User's username"
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/ApiResponse"
        404:
          description: "fail"
  /articles:
    post:
      tags:
      - "articles"
      summary: "Create article"
      description: "Creates a new article in the application"
      operationId: "createArticle"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "formData"
        name: "title"
        description: "The article title"
        required: true
        type: "string"
        format: "text"
        minLength: 4
        maxLength: 500
      - in: "formData"
        name: "body"
        description: "The article body"
        required: true
        type: "string"
        format: "text"
        minLength: 4
      - in: "formData"
        name: "image"
        description: "The image url"
        required: false
        type: "string"
        format: "text"
      responses:
        200:
          description: "Article created successfully"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Title/ body is not allowed to be empty"
      security:
      - api_key: []
    get:
      tags:
      - "articles"
      summary: "User can get all articles"
      description: "Returns all available articles"
      operationId: "getArticles"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "fail"
  /articles/{slug}:
    get:
      tags:
      - "articles"
      summary: "User can get all articles"
      description: "Returns all available articles"
      operationId: "getArticle"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to retrieve comments"
        required: true
        type: "string"
        format: "slug"
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "fail"
    delete:
      tags:
      - "articles"
      summary: "User can delete an articles"
      description: "Deletes an article in application"
      operationId: "deleteArticles"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "fail"
      security:
      - api_key: []
    put:
      tags:
      - "articles"
      summary: "Update article"
      description: "Updates an article in the application"
      operationId: "updateArticle"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "formData"
        name: "title"
        description: "The article title"
        required: true
        type: "string"
        format: "text"
        minLength: 4
        maxLength: 500
      - in: "formData"
        name: "body"
        description: "The article body"
        required: true
        type: "string"
        format: "text"
        minLength: 4
      - in: "formData"
        name: "image"
        description: "The image url"
        required: false
        type: "string"
        format: "text"
      responses:
        200:
          description: "Article updated successfully"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Title/ body is not allowed to be empty"
  /articles/{slug}/rate:
    post:
      tags:
      - "articles"
      summary: "Rate Article"
      description: "Rates an article"
      operationId: "rateArticle"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to be rated"
        required: true
        type: "string"
        format: "slug"
      - name: "rate"
        in: "formData"
        description: "Rating you are giving to the article"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Rating has been updated"
          schema:
            $ref: "#/definitions/ApiResponse"
        201:
          description: "New rating has been made"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid rating supplied"
        404:
          description: "Article does not exist"
      security:
      - api_key: []
    get:
      tags:
      - "articles"
      summary: "Get ratings"
      description: "Get all article ratings"
      operationId: "getArticleRatings"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to be get ratings"
        required: true
        type: "string"
        format: "slug"
      responses:
        200:
          description: "success"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "fail"
  /articles/{slug}/comments:
    post:
      tags:
      - "articles"
      summary: "Comment On Article"
      description: "Leaves a comment on an article"
      operationId: "create"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to comment on"
        required: true
        type: "string"
        format: "slug"
      - name: "comment"
        in: "formData"
        description: "Comment you are giving the article"
        required: true
        type: "string"
        format: "text"
      responses:
        201:
          description: "Comment added successfully."
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad Request"
        404:
          description: "Article does not exist"
      security:
      - api_key: []
    get:
      tags:
      - "articles"
      summary: "Get comments"
      description: "Gets comments left on an article"
      operationId: "getComments"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to retrieve comments"
        required: true
        type: "string"
        format: "slug"
      responses:
        200:
          description: "Comments retrieved successfully."
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad Request"
        404:
          description: "Article does not exist"
      security:
      - api_key: []
  /articles/{slug}/comments/{id}:
    put:
      tags:
      - "articles"
      summary: "Update Comment"
      description: "Updates a comment on an article"
      operationId: "updateComment"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to update comment"
        required: true
        type: "string"
        format: "text"
      - name: "id"
        in: "path"
        description: "Id of the comment to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "comment"
        in: "formData"
        description: "Comment you are updating"
        required: true
        type: "string"
        format: "text"
      responses:
        200:
          description: "Comment updated successfully."
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad Request"
        404:
          description: "Article does not exist"
      security:
      - api_key: []
    delete:
      tags:
      - "articles"
      summary: "Delete Comment"
      description: "Deletes a comment from an article"
      operationId: "deleteComment"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Id of the article to delete comment"
        required: true
        type: "string"
        format: "text"
      - name: "id"
        in: "path"
        description: "Id of the comment to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Comment deleted successfully."
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad Request"
        404:
          description: "Article does not exist"
      security:
      - api_key: []
  /articles/{slug}/comments/{id}/like:
    post:
      tags:
      - "articles"
      summary: "Like Comment"
      description: "Likes a comment"
      operationId: "likeComment"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article with the comment"
        required: true
        type: "string"
        format: "text"
      - name: "id"
        in: "path"
        description: "Id of the comment to be liked"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Comment liked successfully."
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad Request"
        404:
          description: "Comment does not exist"
      security:
      - api_key: []
    delete:
      tags:
      - "articles"
      summary: "Unlike Comment"
      description: "Unlikes a comment"
      operationId: "unlikeComment"
      produces:
      - "application/json"
      parameters:
      - name: "slug"
        in: "path"
        description: "Slug of the article to unlike comment"
        required: true
        type: "string"
        format: "text"
      - name: "id"
        in: "path"
        description: "Id of the comment to be unliked"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Comment unliked successfully."
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Bad Request"
        404:
          description: "Comment does not exist"
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      active:
        type: boolean
  Profile:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      firstname:
        type: "string"
      lastname:
        type: "string"
      bio:
        type: "string"
      avatar:
        type: "string"
      phone:
        type: "integer"
        format: "int64"
      location:
        type: "string"
  Articles:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      body:
        type: "string"
      image:
      userId:
        type: "string"
      bio:
        type: "string"
      avatar:
        type: "string"
      phone:
        type: "string"
      location:
        type: "string"
  Rating:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      userId:
        type: "string"
        format: "uuid"
      articleId:
        type: "string"
        format: "uuid"
      ratings:
        type: "integer"
  PasswordReset:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "string"
        format: "uuid"
      resetPasswordToken:
        type: "string"
        format: "text"
      resetPasswordExpiry:
        type: "string"
        format: "date-time"
  ApiResponse:
    type: "object"
    properties:
      status:
        type: "integer"
        format: "int32"
      data:
        type: "object"
        items:
          type: "object"
externalDocs:
  description: "Find out more about Author's Haven"
  url: "https://github.com/andela/kingsmen-ah-backend"
